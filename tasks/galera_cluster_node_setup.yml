---
- become: true
  hosts: cluster_servers
  tasks:
    - name: Include variables
      include_vars: ../vars/galera_cluster_variables.yml
    - name: Include encrypted variables
      include_vars: ../vars/user_passwords.yml
    - name: Get cluster node IP addresses
      set_fact:
        galera_cluster_ips: "gcomm://{{ groups['cluster_servers'] | map('extract', hostvars, ['ansible_ssh_host']) | join(',') }}"
    - name: testing...galera_cluster_ips
      debug:
        msg: "{{ galera_cluster_ips }}"
    #- meta: end_play
    - name: Put SELinux in permissive mode
      selinux:
        policy: targeted
        state: permissive
    - name: Update /etc/hosts from inventory
      lineinfile:
        dest: /etc/hosts
        regexp: '.*{{ item }}$'
        line: '{{hostvars[item].ansible_default_ipv4.address}} {{ item }}'
        #line: '{{hostvars[item].ansible_enp0s3.ipv4.address }} {{ item }}'
        #line: '{{hostvars[item].ansible_enp0s8.ipv4.address }} {{ item }}'
        state: present
      #with_items: "{{ groups.all }}"
      with_items:
        - "{{ groups.cluster_servers }}"
        #- "{{ groups.haproxy_servers }}"
        #- "{{ groups.web_servers }}"
    - name: Install xinetd and socat
      yum:
        name: "{{ packages }}"
        update_cache: yes
        state: latest
      vars:
        packages:
           - socat
           - xinetd
    - name: Add MariaDB repository
      yum_repository:
        name: mariadb
        description: 'Mariadb repository'
        baseurl: http://yum.mariadb.org/10.0/centos7-amd64/
        gpgkey: https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
        gpgcheck: yes
    - name: Install MariaDB-Galera-server, MariaDB-client, MYSQL-python and Galera
      yum:
        name: "{{ packages }}"
        update_cache: yes
        state: latest
      vars:
        packages:
         - MariaDB-Galera-server
         - MariaDB-client
         - galera
         - MySQL-python
    - name: Add mysql port to the firewall
      firewalld:
         service: mysql
         zone: public
         permanent: true
         state: enabled
         immediate: true
    - name: Add tcp ports used by MySQL/MariaDB and Galera to the firewall
      firewalld:
        port: "{{ item }}"
        zone: public
        permanent: true
        state: enabled
        immediate: true
      with_items:
        - '3030/tcp'
        - '3306/tcp'
        - '4567/tcp'
        - '4568/tcp'
        - '4444/tcp'
        - '9000/tcp'
        - '9200/tcp'
        - '4567/udp'
    - name: Restart firewalld to have new rules take effect.
      service:
        name: firewalld
        state: restarted
    # - name: Copy clustercheck script to /usr/bin/
    #   copy:
    #       src: ../files/clustercheck
    #       dest: /usr/bin/clustercheck
    #       owner: root
    #       group: root
    #       mode: u+rx,g-rx,o-rwx
    - name: Copy mysqlchk script to /etc/xinetd.d
      copy:
          src: ../files/mysqlchk
          dest: /etc/xinetd.d/mysqlchk
          owner: root
          group: root
          mode: u+rx,g-rx,o-rwx
    #wap-wsp         9200/tcp                # WAP connectionless session service
    #wap-wsp         9200/udp                # WAP connectionless session service
    - name: Comment out the two existing entries for port 9200
      replace:
        dest: /etc/services
        regexp: '^wap-wsp\s+9200\/[tu][cd]p'
        replace: '#wap-wsp'
        backup: yes
    - name: "add Galera Clustercheck 9200 to replace monneted out entries"
      lineinfile:
        path: /etc/services
        regexp: '^#wap-wsp\s+9200\/tcp'
        insertbefore: '#wap-wsp'
        line: 'mysqlchk        9200/tcp                 # Galera Clustercheck'
    - name: Start xinetd
      service:
         name: xinetd
         state: started
    - name: Start MySQL/MariaDB
      service:
        name: mysql
        state: started
    - name: Delete anonymous MySQL/MariaDB server user
      mysql_user:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        check_implicit_admin: yes
        user: ""
        host: "{{ item }}"
        state: "absent"
      with_items:
        - ""
        - "{{ ansible_nodename }}"
        - localhost
    - name: Change root user password on first run
      mysql_user:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        check_implicit_admin: yes
        name: root
        password: "{{ mysql_root_password }}"
        priv: '*.*:ALL,GRANT'
        host: "{{ item }}"
      with_items:
        - "{{ ansible_nodename }}"
        - 127.0.0.1
        - localhost
    - name: Create Galera replication user
      mysql_user:
          login_user: root
          login_password: "{{ mysql_root_password }}"
          name: "{{ galera_cluster_user }}"
          password: "{{ galera_cluster_user_password }}"
          priv: '*.*:ALL,GRANT'
          state: present
          host: "{{ item }}"
      with_items:
          - "{{ ansible_nodename }}"
          - 127.0.0.1
          - localhost
    - name: Create Galera cluster check user
      mysql_user:
          login_user: root
          login_password: "{{ mysql_root_password }}"
          name: "{{ galera_clustercheck_user }}"
          password: "{{ galera_clustercheck_user_password }}"
          priv: '*.*:PROCESS'
          state: present
          host: "{{ item }}"
      with_items:
          - "{{ ansible_nodename }}"
          - 127.0.0.1
          - localhost
    - name: Remove the MySQL test database
      mysql_db:
        login_user: root
        login_password: "{{ mysql_root_password }}"
        db: test
        state: absent
    - name: Stop MySQL/MariaDB
      service:
        name: mysql
        state: stopped
    - name: Galera configuration file
      template:
        src: ../templates/cluster.cnf.j2
        dest: /etc/my.cnf.d/server.cnf
        owner: root
        group: root
        mode: 0644

#
